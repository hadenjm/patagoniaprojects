import wave
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier

# Set the name of the audio file
audio_file_name = 'audio.wav'

# Open the audio file
audio_file = wave.open(audio_file_name, 'r')

# Get the frame rate and number of frames in the audio file
frame_rate = audio_file.getframerate()
num_frames = audio_file.getnframes()

# Read the audio data from the file
audio_data = audio_file.readframes(num_frames)

# Convert the audio data to a numpy array
audio_data = np.frombuffer(audio_data, dtype=np.int16)

# Plot the spectrogram of the audio data
plt.specgram(audio_data, Fs=frame_rate)

# Show the plot
plt.show()

# Load the training data
X = np.load('spectrogram_data.npy')
y = np.load('spectrogram_labels.npy')

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a neural network classifier
classifier = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, alpha=1e-4,
                           solver='sgd', verbose=10, tol=1e-4, random_state=1)

# Train the classifier on the training data
classifier.fit(X_train, y_train)

# Print the accuracy of the classifier on the test data
print('Accuracy:', classifier.score(X_test, y_test))

# Use the classifier to predict the label for the audio file
predicted_label = classifier.predict([audio_data])

# Print the predicted label
print('Predicted label:', predicted_label)
